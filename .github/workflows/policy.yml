name: policy

on:
  push:
    branches:
      - main
    paths:
      - policy/**
  pull_request:
    branches:
      - main
    paths:
      - policy/**
  workflow_dispatch:
    inputs:
      checkflag:
        description: 'If true, validate the changes. If false, apply the changes'
        required: true
        default: 'true'

jobs:
  # This workflow can be triggered multiple ways,
  # e.g. manually or by push/pull request.
  # The first job figures out the parameters based on trigger type.
  # The second job runs ansible for each environment
  process-policies:
    runs-on:
      - ubuntu-latest
    outputs:
      apply_tags: ${{ steps.parseinput.outputs.apply_tags }}
      aztagscli_args: ${{ steps.setupargs.outputs.aztagscli_args }}
      env_matrix: ${{ steps.setupenv.outputs.env_matrix }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v2

      - name: Parse inputs
        id: parseinput
        run: |
          echo "Parsing input parameters event=${GITHUB_EVENT_NAME}"
          branch=$(echo ${GITHUB_REF##*/})
          echo "Extracted last part of branch [${branch}] from ${GITHUB_REF}"
          # figure out which environment to deploy to and whether to set checkflag or not
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            # manual trigger - take params from inputs
            checkflag="${{ github.event.inputs.checkflag }}"
          elif [[ "${GITHUB_EVENT_NAME}" == "push" && ( "${branch}" == "master" || "${branch}" == "main" ) ]]; then
            # push to master/main - deploy for real
            checkflag="false"
          else
            # any other push - deploy with check flag set
            checkflag="true"
          fi
          if [[ checkflag = "true" ]]; then
            echo "::set-output name=policyaction::show"
          else
            echo "::set-output name=policyaction::update"
          fi

      - name: Azure Login
        uses: azure/login@v1.1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Process policy definition
        env:
          policyaction: ${{ steps.parseinput.outputs.policyaction }}
        run: |
          cd policy/definition
          echo ./az-policy-definition.sh ${policyaction}
          ./az-policy-definition.sh ${policyaction}

      - name: Process policy initiative
        env:
          policyaction: ${{ steps.parseinput.outputs.policyaction }}
        run: |
          cd policy/set-definition
          echo ./az-policy-set-definition.sh ${policyaction}
          ./az-policy-set-definition.sh ${policyaction}

      - name: Process policy assignment
        env:
          policyaction: ${{ steps.parseinput.outputs.policyaction }}
        run: |
          cd policy/assignment
          echo ./az-policy-assignment.sh ${policyaction}
          ./az-policy-assignment.sh ${policyaction}
